type User {
    id: ID!
    name: String
    email: String!
    active: Int!
    role: Int!
    avatar: file
    abilities: [permission] @hasMany
    stores: [store] @hasMany
}

type permission {
    id: ID!
    code: String
    description: String
}

extend type Query @guard {
    users(role: Int @eq, active: Int @eq): [User!] @paginate @admin
    storeUsers(idStore: ID!, role: Int @eq, active: Int @eq): [User!]
        @field(resolver: "Authenticate@storeUsers")
        @admin
    me: User @auth

    storeUser(idStore: ID!, id: ID!): storeUserReturnType
        @field(resolver: "Authenticate@storeUser")

    initialise: Init @field(resolver: "Authenticate@initialise")
}

extend type Query {
    user(id: ID! @eq): User @find

    authenticate(email: String!, password: String!): AuthenticateResponse!
        @field(resolver: "Authenticate@login")
}

extend type Mutation @guard {
    newUser(name: String!, email: String!, password: String!): newUserResponse
        @field(resolver: "Authenticate@newAdmin")

    newStaff(
        idStore: ID!
        email: String!
        permissions: [Int!]
    ): newUserResponse @field(resolver: "Authenticate@newStaff") @admin

    deleteStaff(idStore: ID!, id: ID!): Boolean!
        @field(resolver: "Authenticate@deleteAdmin")
        @admin

    toggleUserStatus(idStore: ID!, id: ID!): User!
        @field(resolver: "Authenticate@toggleStatus")
        @admin

    togglePermission(idStore: ID!, id: ID!, code: String!): Boolean!
        @field(resolver: "Authenticate@togglePermission")
        @admin

    changePassword(
        password: String!
        new_password: String!
        confirmation_password: String!
    ): Int! @field(resolver: "Authenticate@changePassword")

    changeName(new_name: String!): String
        @field(resolver: "Authenticate@changeName")

    changeAvatar(image: Upload!): file
        @field(resolver: "Authenticate@uploadAvatar")
}
type storeUserReturnType {
    user: User
    abilities: [permission]
}
