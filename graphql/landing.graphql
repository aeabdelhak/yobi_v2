type landingPage {
    id: ID!
    name: String!
    domain: String!
    description: String
    product_name: String!
    product_description: String
    status: Int!
    store: store!
    pallete: pallete!
    audios: [audio] @hasMany
    poster: file
    shapes: [shape] @hasMany
    offers: [offer] @hasMany
    images: [image] @hasMany
    results: [userResult] @hasMany
    cards: [card] @hasMany
}


type LandingPageForClient @model(class: "landingPage") {
    id: ID!
    name: String!
    domain: String!
    description: String
    product_name: String!
    product_description: String
    status: Int!
    store: store!
    pallete: pallete!
    audios: [audio] @hasMany
    poster: file
    activatedShapes: [ShapeForClient] @hasMany
    shapes: [shape] @hasMany
    offers: [offer] @hasMany
}

extend type Query {
    landingForClient(domain: String! @eq): LandingPageForClient 
    @field(resolver: "LandingPagesQueries@landingForClient") 
    @cache(maxAge: 60)

}

extend type Query  @guard{
    landingsPages(id_store: ID! @eq): [landingPage] @all
    landingPage(id: ID! @eq): landingPage 
    @can(ability: "view", resolved: true)
    @first
    storeLandingsPages:[landingPage] @field(resolver: "LandingPagesQueries@storeLandingsPages") 
}

extend type Mutation  @guard{
    createLandingPage(
        name:String!
        description:String
        product_name:String!
        domain:String!
        product_description:String!
        id_pallete:ID!
        poster:Upload!
    ):response @field(resolver: "LandingMutator@newLanding") 
}
type response {
    message:String
    status:Int
    landingPage:landingPage
}