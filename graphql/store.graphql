type store {
    id: ID!
    name: String!
    description: String
    status: Int!
    token: String!
    secret_token: String!
    fecebook_meta_tag: String
    domain: String!
    facebook: String
    tiktok: String
    google: String
    icon: file
    orders: [order]! @paginate
    landings: [landingPage] @hasMany
    users: [User] @hasMany
}


type StoreForClient {
    id: ID!
    name: String!
    description: String
    status: Int!
    fecebook_meta_tag: String
    facebook: String
    tiktok: String
    google: String
    icon: file
    landings: [landingPage]
}

extend type Query {
    getStore(id: ID! @eq): store @find
}
extend type Query @guard {
    stores: [store] @all
    choseStore(storeId: ID!): ChoseStoreResponse!
        @field(resolver: "StoreQueries@choseStore")
}
extend type Mutation @guard {
    changeStoreIcon(
                    id:ID!
        image: Upload!): file
        @field(resolver: "StoreMutator@changeIcon")
        updateStore( 
                    id:ID!
                    name: String!
                    description: String
                    token: String!
                    secret_token: String!
                    fecebook_meta_tag: String
                    facebook: String
                    tiktok: String
                    google: String
                    ): store         
        @field(resolver: "StoreMutator@update")
        changeDomain(idStore:ID!,domain:String!) : changeDomainResponse  
        @field(resolver: "StoreMutator@changeDomain")
        @admin

}
type changeDomainResponse{
    status:Int
    store:store
}